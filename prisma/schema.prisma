// Learn more Prisma schema file at https://pris.ly/d/prisma-schema.

generator client {
  provider = "prisma-client-js"
  // Prisma is deprecating automatic generation in node_modules
  // and instead requiring the developer to specify the output 
  // directory. But while trying out Prismock, I found that 
  // they still rely on the old behavior. So I'm holding out 
  // on this change.
  // output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Users of the system.
model User {
  /// User's primary key.
  id        Int       @id @default(autoincrement())
  /// When the user was created.
  createdAt DateTime  @default(now())
  /// When the user was last updated.
  updatedAt DateTime  @updatedAt
  /// When the user was deleted.
  deletedAt DateTime?
  /// User's email address.
  email     String    @unique
  /// User's password hash.
  password  String

  /// Sessions belonging to the user.
  sessions   Session[]
  /// Characters created by the user.
  characters Character[]
}

/// Authentication sessions.
model Session {
  /// Session's primary key.
  id          Int      @id @default(autoincrement())
  /// Session's secret token.
  secret      String   @unique @default(cuid())
  /// When the session was created.
  createdAt   DateTime @default(now())
  /// When the session expires.
  expiresAt   DateTime @default(now())
  /// IP address of the client that created the session.
  ip          String
  /// User agent of the client that created the session.
  userAgent   String
  /// Geolocation of the client that created the session.
  geolocation String   @default("unknown region")

  /// User to whom the session belongs.
  userId Int
  /// User to whom the session belongs.
  user   User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index(expiresAt)
}

/// Characters in the world, player controlled or otherwise.
model Character {
  /// Character's primary key.
  id          Int       @id @default(autoincrement())
  /// When the character was created.
  createdAt   DateTime  @default(now())
  /// When the character was last updated.
  updatedAt   DateTime  @updatedAt
  /// When the character was deleted.
  deletedAt   DateTime?
  /// Character's name.
  name        String    @unique
  /// Character's description.
  description String?
  /// Character tags.
  tags        String[]

  /// User to whom the character belongs.
  userId     Int?
  /// User to whom the character belongs.
  user       User?       @relation(fields: [userId], references: [id], onDelete: Restrict)
  /// Current location of the character.
  locationId Int
  /// Current location of the character.
  location   Location    @relation(fields: [locationId], references: [id], onDelete: Restrict)
  /// Character's equipment slots.
  slots      Container[]
  /// Character's attributes.
  attributes Attribute[]
  /// Character's log entries.
  logs       Log[]
  /// Character's actions.
  actions    Action[]

  @@index(tags)
  @@index(deletedAt)
}

/// Static information about attributes.
model AttributeSpecification {
  /// Attribute specification's primary key.
  id          Int      @id @default(autoincrement())
  /// When the specification was created.
  createdAt   DateTime @default(now())
  /// When the specification was last updated.
  updatedAt   DateTime @updatedAt
  /// Attribute's name.
  name        String   @unique
  /// Attribute's human-readable description.
  description String?
  /// Attribute tags.
  tags        String[]

  /// Attributes specified by this specification.
  attributes Attribute[]

  @@index(tags)
}

/// Attributes are outcome modifiers.
model Attribute {
  /// Attribute's primary key.
  id        Int      @id @default(autoincrement())
  /// When the attribute was created.
  createdAt DateTime @default(now())
  /// When the attribute was last updated.
  updatedAt DateTime @updatedAt
  /// Attribute's current level.
  level     Int      @default(0)
  /// Attribute's maximum level.
  cap       Int      @default(100)

  /// Attribute's specification.
  specId      Int
  /// Attribute's specification.
  spec        AttributeSpecification @relation(fields: [specId], references: [id], onDelete: Restrict)
  /// Character this attribute belongs to.
  characterId Int
  /// Character this attribute belongs to.
  character   Character              @relation(fields: [characterId], references: [id], onDelete: Restrict)
}

/// Actions performed by characters, such as traveling, crafting, etc.
model Action {
  /// Action's primary key.
  id          Int      @id @default(autoincrement())
  /// When the action was created.
  createdAt   DateTime @default(now())
  /// When the action completes.
  completesAt DateTime
  /// Action tags.
  tags        String[]
  /// Action parameters.
  params      Json

  /// Character performing the action.
  characterId Int
  /// Character performing the action.
  character   Character @relation(fields: [characterId], references: [id], onDelete: Restrict)

  @@index(tags)
}

/// Logs are events involving a character.
model Log {
  /// Log entry's primary key.
  id        Int      @id @default(autoincrement())
  /// When the log entry was created.
  createdAt DateTime @default(now())
  /// Log entry's message.
  message   String

  /// Character that created the log entry.
  characterId Int
  /// Character that created the log entry.
  character   Character @relation(fields: [characterId], references: [id], onDelete: Restrict)
}

/// Containers are item holders, such as bags, chests, character slots, etc.
model Container {
  /// Container's primary key.
  id        Int      @id @default(autoincrement())
  /// When the container was created.
  createdAt DateTime @default(now())
  /// When the container was last updated.
  updatedAt DateTime @updatedAt
  /// Container tags.
  tags      String[]

  /// Item source of the container (if provided by an item).
  sourceId    Int?       @unique
  /// Item source of the container.
  source      Item?      @relation("storage", fields: [sourceId], references: [id], onDelete: Restrict)
  /// Container's owner.
  characterId Int?
  /// Container's owner.
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Restrict)
  /// Container's location.
  locationId  Int?
  /// Container's location.
  location    Location?  @relation(fields: [locationId], references: [id], onDelete: Restrict)
  /// Container's contents.
  items       Item[]

  @@index(tags)
}

/// Specifications for item properties and behavior.
model ItemSpecification {
  /// Item specification's primary key.
  id          Int      @id @default(autoincrement())
  /// When the specification was created.
  createdAt   DateTime @default(now())
  /// When the specification was last updated.
  updatedAt   DateTime @updatedAt
  /// Item's name.
  name        String   @unique
  /// Item's human-readable description.
  description String?
  /// Item's base value.
  value       Int      @default(0)
  /// Item's quality.
  quality     Int      @default(100)
  /// Item tags.
  tags        String[]

  /// Items specified by this specification.
  items Item[]

  @@index(tags)
}

/// Items in the world.
model Item {
  /// Item's primary key.
  id         Int      @id @default(autoincrement())
  /// When the item was created.
  createdAt  DateTime @default(now())
  /// When the item was last updated.
  updatedAt  DateTime @updatedAt
  /// Item's stack amount.
  amount     Int      @default(1)
  /// Item's current durability.
  durability Int      @default(100)

  /// Item's specification.
  specId      Int
  /// Item's specification.
  spec        ItemSpecification @relation(fields: [specId], references: [id], onDelete: Restrict)
  /// Container holding the item.
  containerId Int?
  /// Container holding the item.
  container   Container?        @relation(fields: [containerId], references: [id], onDelete: Restrict)
  /// Storage provided by the item.
  storage     Container?        @relation("storage")
}

/// Locations in the world.
model Location {
  /// Location's primary key.
  id          Int      @id @default(autoincrement())
  /// When the location was created.
  createdAt   DateTime @default(now())
  /// When the location was last updated.
  updatedAt   DateTime @updatedAt
  /// Location's name.
  name        String   @unique
  /// Location's human-readable description.
  description String?
  /// Location's area.
  area        Int
  /// Location's security level.
  security    Int
  /// Location tags.
  tags        String[]

  /// Characters currently in the location.
  characters   Character[]
  /// Routes from which you can enter this location.
  routes       Location[]  @relation("route")
  /// Locations connected to this route.
  destinations Location[]  @relation("route")
  /// Containers bound to the location.
  containers   Container[]

  @@index(tags)
}
