// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User of the system.
model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String

  sessions   Session[]
  characters Character[]
}

/// Sessions are used for authentication.
model Session {
  id         Int      @id @default(autoincrement())
  secret     String   @unique @default(cuid())
  createdAt  DateTime @default(now())
  expiresAt  DateTime @default(now()) // We compute the actual default value in a client extension. This only exists to make the data optional.
  remoteAddr String
  userAgent  String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Characters in the world.
model Character {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  name        String
  description String?
  tags        String[]

  userId      Int?
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  locationId  Int
  location    Location    @relation(fields: [locationId], references: [id])
  containerId Int         @unique
  container   Container   @relation(fields: [containerId], references: [id], onDelete: Cascade)
  attributes  Attribute[]
  acts        Act[]
  logs        Log[]
}

/// Acts can be performed by characters.
model Act {
  id          Int       @id @default(autoincrement())
  startedAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completesAt DateTime?
  data        Json      @default("{}")

  characterId Int
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

/// Log events from a player character's perspective.
model Log {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  readAt    DateTime?
  message   String

  characterId Int
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

/// Static information of attributes.
model AttributeSpecification {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  tags        String[]

  attributes Attribute[]

  @@index([tags])
}

/// Attributes are checked against when deciding outcomes.
model Attribute {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Int      @default(1)
  progress  Int      @default(0)

  specificationId Int
  specification   AttributeSpecification @relation(fields: [specificationId], references: [id], onDelete: Cascade)
  characterId     Int
  character       Character              @relation(fields: [characterId], references: [id])
}

/// Container holds items.
model Container {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  character Character?
  location  Location?
  items     Item[]
}

/// Static information of items.
model ItemSpecification {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  tags        String[]

  items Item[]

  @@index([tags])
}

/// Items in the world.
model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Int      @default(1)

  specificationId Int
  specification   ItemSpecification @relation(fields: [specificationId], references: [id], onDelete: Cascade)
  containerId     Int
  container       Container         @relation(fields: [containerId], references: [id], onDelete: Cascade)
}

/// Locations in the world.
model Location {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  tags        String[]

  containerId Int         @unique
  container   Container   @relation(fields: [containerId], references: [id], onDelete: Cascade)
  characters  Character[]
  entries     Path[]      @relation("entry")
  exits       Path[]      @relation("exit")

  @@index([tags])
}

/// Paths connect locations.
model Path {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entryId Int
  entry   Location @relation("entry", fields: [entryId], references: [id], onDelete: Cascade)
  exitId  Int
  exit    Location @relation("exit", fields: [exitId], references: [id], onDelete: Cascade)
}
