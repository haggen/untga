// Learn more Prisma schema file at https://pris.ly/d/prisma-schema.

generator client {
  provider = "prisma-client-js"
  // Prisma is deprecating automatic generation in node_modules
  // and instead requiring the developer to specify the output 
  // directory. But while trying out Prismock, I found that 
  // they still rely on the old behavior. Se I'm holding out 
  // on this change.
  // output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User of the system.
model User {
  /// The primary key.
  id        Int       @id @default(autoincrement())
  /// When it was created.
  createdAt DateTime  @default(now())
  /// When it was last updated.
  updatedAt DateTime  @updatedAt
  /// When it was deleted.
  deletedAt DateTime?
  /// User's email.
  email     String    @unique
  /// Password hash
  password  String

  /// User's sessions.
  sessions   Session[]
  /// Characters created by the user.
  characters Character[]
}

/// Authentication sessions.
model Session {
  /// The primary key.
  id        Int      @id @default(autoincrement())
  /// The session's secret key.
  secret    String   @unique @default(cuid())
  /// When it was created.
  createdAt DateTime @default(now())
  /// When it expires.
  expiresAt DateTime @default(now()) // We compute the actual default value in a client extension. This only exists to make the input optional.
  /// The remote address of the client that created the session.
  ip        String
  /// The user agent that created the session.
  userAgent String

  /// User to whom the session belongs.
  userId Int
  /// User to whom the session belongs.
  user   User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([expiresAt])
}

/// Characters in the world, player controlled or otherwise.
model Character {
  /// The primary key.
  id          Int       @id @default(autoincrement())
  /// When it was created.
  createdAt   DateTime  @default(now())
  /// When it was last updated.
  updatedAt   DateTime  @updatedAt
  /// When it was deleted.
  deletedAt   DateTime?
  /// The name of the character.
  name        String
  /// Character's bio.
  description String?
  /// The current status of the character.
  status      String    @default("idle")
  /// Tags allow for attaching behavior.
  tags        String[]

  /// The user to whom the character belongs.
  userId     Int?
  /// The user to whom the character belongs.
  user       User?       @relation(fields: [userId], references: [id], onDelete: Restrict)
  /// The current location of the character.
  locationId Int
  /// The current location of the character.
  location   Location    @relation(fields: [locationId], references: [id], onDelete: Restrict)
  /// The character's equipment slots.
  slots      Container[]
  /// The character's attributes.
  attributes Attribute[]
  /// The character's log entries.
  logs       Log[]
  /// The character's active effects.
  effects    Effect[]

  @@index([tags])
  @@index([deletedAt])
}

/// Static information of attributes.
model AttributeSpecification {
  /// The primary key.
  id          Int      @id @default(autoincrement())
  /// When it was created.
  createdAt   DateTime @default(now())
  /// When it was last updated.
  updatedAt   DateTime @updatedAt
  /// Attribute's name.
  name        String
  /// Human-readable description.
  description String?
  /// Tags allow for attaching behavior.
  tags        String[]

  /// Attributes specified by this specification.
  attributes Attribute[]

  @@index([tags])
}

/// Attributes are outcome modifiers.
model Attribute {
  /// The primary key.
  id        Int      @id @default(autoincrement())
  /// When it was created.
  createdAt DateTime @default(now())
  /// When it was last updated.
  updatedAt DateTime @updatedAt
  /// Attribute's current level in a range of 0-1.
  level     Float    @default(0)
  /// Attribute's maximum level.
  cap       Float    @default(100)

  /// Attribute's specification.
  specId      Int
  /// Attribute's specification.
  spec        AttributeSpecification @relation(fields: [specId], references: [id], onDelete: Restrict)
  /// The character this attribute belongs to.
  characterId Int
  /// The character this attribute belongs to.
  character   Character              @relation(fields: [characterId], references: [id], onDelete: Restrict)
}

/// Log are events involving a character.
model Log {
  /// The primary key.
  id        Int       @id @default(autoincrement())
  /// When it was created.
  createdAt DateTime  @default(now())
  /// When, if ever, it was read by the player.
  readAt    DateTime?
  /// The entry's message.
  message   String

  /// The character that created the log entry.
  characterId Int
  /// The character that created the log entry.
  character   Character @relation(fields: [characterId], references: [id], onDelete: Restrict)
}

/// Containers hold multiple items, like bags.
model Container {
  /// The primary key.
  id        Int      @id @default(autoincrement())
  /// When it was created.
  createdAt DateTime @default(now())
  /// When it was last updated.
  updatedAt DateTime @updatedAt
  /// Tags allow for attaching behavior.
  tags      String[]

  /// If the container is provided by an item, Item source of the container.
  sourceId    Int?       @unique
  /// Item source of the container.
  source      Item?      @relation("storage", fields: [sourceId], references: [id], onDelete: Restrict)
  /// 
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Restrict)
  /// Container as character slots.
  characterId Int?
  /// Contents of the container.
  items       Item[]

  @@index([tags])
}

/// Specifies item's properties and behavior.
model ItemSpecification {
  /// The primary key.
  id          Int      @id @default(autoincrement())
  /// When it was created.
  createdAt   DateTime @default(now())
  /// When it was last updated.
  updatedAt   DateTime @updatedAt
  /// Name of the item.
  name        String
  /// Human-readable description.
  description String?
  /// The item's base price.
  price       Int      @default(0)
  /// Tags allow for attaching behavior.
  tags        String[]

  /// Items it specifies.
  items Item[]

  @@index([tags])
}

/// Items in the world.
model Item {
  /// The primary key.
  id         Int      @id @default(autoincrement())
  /// When it was created.
  createdAt  DateTime @default(now())
  /// When it was last updated.
  updatedAt  DateTime @updatedAt
  /// The item's current amount.
  amount     Int      @default(1)
  /// The item's current durability.
  durability Int      @default(100)

  /// Item's specification.
  specId      Int
  /// Item's specification.
  spec        ItemSpecification @relation(fields: [specId], references: [id], onDelete: Restrict)
  /// The container holding the item.
  containerId Int?
  /// The container holding the item.
  container   Container?        @relation(fields: [containerId], references: [id], onDelete: Restrict)
  /// The storage provided by the item.
  storage     Container?        @relation("storage")
}

/// Effect's specification.
model EffectSpecification {
  /// The primary key.
  id          Int      @id @default(autoincrement())
  /// When it was created.
  createdAt   DateTime @default(now())
  /// When it was last updated.
  updatedAt   DateTime @updatedAt
  /// Name of the effect.
  name        String
  /// Human-readable description.
  description String?
  /// Tags allow for attaching behavior.
  tags        String[]

  /// Effects 
  effects Effect[]

  @@index([tags])
}

/// Effects are modifiers for character outcomes.
model Effect {
  /// Primary key.
  id        Int       @id @default(autoincrement())
  /// When it was created.
  startedAt DateTime  @default(now())
  /// When it expires.
  expiresAt DateTime?

  /// Effect's specification.
  specId      Int
  /// Effect's specification.
  spec        EffectSpecification @relation(fields: [specId], references: [id], onDelete: Restrict)
  /// The character being affected.
  characterId Int
  /// The character being affected.
  character   Character           @relation(fields: [characterId], references: [id], onDelete: Restrict)

  @@index([startedAt])
  @@index([expiresAt])
}

/// Locations in the world.
model Location {
  /// The primary key.
  id          Int      @id @default(autoincrement())
  /// When it was created.
  createdAt   DateTime @default(now())
  /// When it was last updated.
  updatedAt   DateTime @updatedAt
  /// Location's name.
  name        String
  /// Human-readable description.
  description String?
  /// Tags allow for attaching behavior.
  tags        String[]

  /// Characters currently in the location.
  characters Character[]
  /// Routes that lead away from the location. Please note that the exit of a location is the entry of a route.
  exits      Route[]     @relation("exit")
  /// Routes that lead into the location. Please note that the entry of a location is the exit of a route.
  entries    Route[]     @relation("entry")

  @@index([tags])
}

/// Routes allow travel between locations.
model Route {
  /// Primary key.
  id        Int      @id @default(autoincrement())
  /// When it was created.
  createdAt DateTime @default(now())
  /// When it was last updated.
  updatedAt DateTime @updatedAt
  /// The route's length.
  length    Int      @default(1)

  /// Location from where the route starts. Please note that the entry of a route is the exit of a location.
  entryId Int
  /// Location from where the route starts. Please note that the entry of a route is the exit of a location.
  entry   Location @relation("exit", fields: [entryId], references: [id], onDelete: Restrict)
  /// Location to where the route leads. Please note that the exit of a route is the entry of a location.
  exitId  Int
  /// Location to where the route leads. Please note that the exit of a route is the entry of a location.
  exit    Location @relation("entry", fields: [exitId], references: [id], onDelete: Restrict)
}
